/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { BaseClient } from './api.client.base'
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response, RequestOptionsArgs } from '@angular/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client extends BaseClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @model (optional) 
     * @return Success
     */
    contact(model: ContactModel): Observable<void> {
        let url_ = this.baseUrl + "/Contact/Contact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processContact(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processContact(<any>r));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processContact(response: Response): Observable<void> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllPhotoMetadata(): Observable<PhotoMetadataReadModel[]> {
        let url_ = this.baseUrl + "/Photo/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGetAllPhotoMetadata(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGetAllPhotoMetadata(<any>r));
                } catch (e) {
                    return <Observable<PhotoMetadataReadModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoMetadataReadModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAllPhotoMetadata(response: Response): Observable<PhotoMetadataReadModel[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PhotoMetadataReadModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PhotoMetadataReadModel[]>(<any>null);
    }

    /**
     * @ids (optional) 
     * @return Success
     */
    getPhotoMetadata(ids: number[]): Observable<PhotoMetadataReadModel[]> {
        let url_ = this.baseUrl + "/Photo/Get?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGetPhotoMetadata(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGetPhotoMetadata(<any>r));
                } catch (e) {
                    return <Observable<PhotoMetadataReadModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoMetadataReadModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetPhotoMetadata(response: Response): Observable<PhotoMetadataReadModel[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PhotoMetadataReadModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PhotoMetadataReadModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    getSinglePhoto(id: number): Observable<PhotoReadModel> {
        let url_ = this.baseUrl + "/Photo/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGetSinglePhoto(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGetSinglePhoto(<any>r));
                } catch (e) {
                    return <Observable<PhotoReadModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoReadModel>><any>Observable.throw(response_);
        });
    }

    protected processGetSinglePhoto(response: Response): Observable<PhotoReadModel> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PhotoReadModel.fromJS(resultData200) : new PhotoReadModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PhotoReadModel>(<any>null);
    }

    /**
     * @return Success
     */
    getAllPhotoGroups(): Observable<PhotoGroupReadModel[]> {
        let url_ = this.baseUrl + "/PhotoGroup/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGetAllPhotoGroups(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGetAllPhotoGroups(<any>r));
                } catch (e) {
                    return <Observable<PhotoGroupReadModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoGroupReadModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAllPhotoGroups(response: Response): Observable<PhotoGroupReadModel[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PhotoGroupReadModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PhotoGroupReadModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    getPhotoGroup(id: number): Observable<PhotoGroupReadModel> {
        let url_ = this.baseUrl + "/PhotoGroup/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGetPhotoGroup(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGetPhotoGroup(<any>r));
                } catch (e) {
                    return <Observable<PhotoGroupReadModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoGroupReadModel>><any>Observable.throw(response_);
        });
    }

    protected processGetPhotoGroup(response: Response): Observable<PhotoGroupReadModel> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PhotoGroupReadModel.fromJS(resultData200) : new PhotoGroupReadModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PhotoGroupReadModel>(<any>null);
    }

    /**
     * @model (optional) 
     * @return Success
     */
    register(model: RegistrationCreateModel): Observable<number> {
        let url_ = this.baseUrl + "/Registration/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processRegister(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processRegister(<any>r));
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processRegister(response: Response): Observable<number> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    getAllEvents(): Observable<EventReadModel[]> {
        let url_ = this.baseUrl + "/Schedule/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGetAllEvents(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGetAllEvents(<any>r));
                } catch (e) {
                    return <Observable<EventReadModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<EventReadModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAllEvents(response: Response): Observable<EventReadModel[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(EventReadModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<EventReadModel[]>(<any>null);
    }

    /**
     * @ids (optional) 
     * @return Success
     */
    getEvent(ids: number[]): Observable<EventReadModel[]> {
        let url_ = this.baseUrl + "/Schedule/Get?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGetEvent(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGetEvent(<any>r));
                } catch (e) {
                    return <Observable<EventReadModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<EventReadModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEvent(response: Response): Observable<EventReadModel[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(EventReadModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<EventReadModel[]>(<any>null);
    }
}

export class ContactModel implements IContactModel {
    name?: string;
    email?: string;
    message?: string;

    constructor(data?: IContactModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.email = data["email"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): ContactModel {
        data = typeof data === 'object' ? data : {};
        let result = new ContactModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["message"] = this.message;
        return data; 
    }
}

export interface IContactModel {
    name?: string;
    email?: string;
    message?: string;
}

export class PhotoMetadataReadModel implements IPhotoMetadataReadModel {
    id?: number;
    title?: string;
    groupId?: number;
    sortOrder?: number;

    constructor(data?: IPhotoMetadataReadModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.groupId = data["groupId"];
            this.sortOrder = data["sortOrder"];
        }
    }

    static fromJS(data: any): PhotoMetadataReadModel {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoMetadataReadModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["groupId"] = this.groupId;
        data["sortOrder"] = this.sortOrder;
        return data; 
    }
}

export interface IPhotoMetadataReadModel {
    id?: number;
    title?: string;
    groupId?: number;
    sortOrder?: number;
}

export class PhotoReadModel implements IPhotoReadModel {
    id?: number;
    photo?: string;
    title?: string;
    groupId?: number;
    sortOrder?: number;

    constructor(data?: IPhotoReadModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.photo = data["photo"];
            this.title = data["title"];
            this.groupId = data["groupId"];
            this.sortOrder = data["sortOrder"];
        }
    }

    static fromJS(data: any): PhotoReadModel {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoReadModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["photo"] = this.photo;
        data["title"] = this.title;
        data["groupId"] = this.groupId;
        data["sortOrder"] = this.sortOrder;
        return data; 
    }
}

export interface IPhotoReadModel {
    id?: number;
    photo?: string;
    title?: string;
    groupId?: number;
    sortOrder?: number;
}

export class PhotoGroupReadModel implements IPhotoGroupReadModel {
    id?: number;
    photoIds?: number[];
    name?: string;
    sortOrder?: number;

    constructor(data?: IPhotoGroupReadModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["photoIds"] && data["photoIds"].constructor === Array) {
                this.photoIds = [];
                for (let item of data["photoIds"])
                    this.photoIds.push(item);
            }
            this.name = data["name"];
            this.sortOrder = data["sortOrder"];
        }
    }

    static fromJS(data: any): PhotoGroupReadModel {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoGroupReadModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.photoIds && this.photoIds.constructor === Array) {
            data["photoIds"] = [];
            for (let item of this.photoIds)
                data["photoIds"].push(item);
        }
        data["name"] = this.name;
        data["sortOrder"] = this.sortOrder;
        return data; 
    }
}

export interface IPhotoGroupReadModel {
    id?: number;
    photoIds?: number[];
    name?: string;
    sortOrder?: number;
}

export class RegistrationCreateModel implements IRegistrationCreateModel {
    children?: ChildInformationCreateModel[];
    stripeToken?: string;
    comments?: string;
    registrationType?: RegistrationCreateModelRegistrationType;
    firstName?: string;
    lastName?: string;
    emailAddress?: string;
    phoneNumber?: string;
    address?: string;
    address2?: string;
    city?: string;
    state?: string;
    zip?: string;

    constructor(data?: IRegistrationCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [];
                for (let item of data["children"])
                    this.children.push(ChildInformationCreateModel.fromJS(item));
            }
            this.stripeToken = data["stripeToken"];
            this.comments = data["comments"];
            this.registrationType = data["registrationType"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.address = data["address"];
            this.address2 = data["address2"];
            this.city = data["city"];
            this.state = data["state"];
            this.zip = data["zip"];
        }
    }

    static fromJS(data: any): RegistrationCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["stripeToken"] = this.stripeToken;
        data["comments"] = this.comments;
        data["registrationType"] = this.registrationType;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["address2"] = this.address2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zip"] = this.zip;
        return data; 
    }
}

export interface IRegistrationCreateModel {
    children?: ChildInformationCreateModel[];
    stripeToken?: string;
    comments?: string;
    registrationType?: RegistrationCreateModelRegistrationType;
    firstName?: string;
    lastName?: string;
    emailAddress?: string;
    phoneNumber?: string;
    address?: string;
    address2?: string;
    city?: string;
    state?: string;
    zip?: string;
}

export class ChildInformationCreateModel implements IChildInformationCreateModel {
    firstName?: string;
    lastName?: string;
    gender?: string;
    dateOfBirth?: Date;
    shirtSize?: string;

    constructor(data?: IChildInformationCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.gender = data["gender"];
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>undefined;
            this.shirtSize = data["shirtSize"];
        }
    }

    static fromJS(data: any): ChildInformationCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new ChildInformationCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["shirtSize"] = this.shirtSize;
        return data; 
    }
}

export interface IChildInformationCreateModel {
    firstName?: string;
    lastName?: string;
    gender?: string;
    dateOfBirth?: Date;
    shirtSize?: string;
}

export class EventReadModel implements IEventReadModel {
    id?: number;
    date?: Date;
    title?: string;
    description?: string;

    constructor(data?: IEventReadModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.date = data["date"] ? new Date(data["date"].toString()) : <any>undefined;
            this.title = data["title"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): EventReadModel {
        data = typeof data === 'object' ? data : {};
        let result = new EventReadModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["description"] = this.description;
        return data; 
    }
}

export interface IEventReadModel {
    id?: number;
    date?: Date;
    title?: string;
    description?: string;
}

export enum RegistrationCreateModelRegistrationType {
    Cash = <any>"Cash", 
    Paypal = <any>"Paypal", 
    Other = <any>"Other", 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}